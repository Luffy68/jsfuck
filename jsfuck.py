import os
from termcolor import colored as cl

os.system('clear')


name = """

░░░░░██╗░██████╗███████╗██╗░░░██╗░█████╗░██╗░░██╗
░░░░░██║██╔════╝██╔════╝██║░░░██║██╔══██╗██║░██╔╝
░░░░░██║╚█████╗░█████╗░░██║░░░██║██║░░╚═╝█████═╝░
██╗░░██║░╚═══██╗██╔══╝░░██║░░░██║██║░░██╗██╔═██╗░
╚█████╔╝██████╔╝██║░░░░░╚██████╔╝╚█████╔╝██║░╚██╗
░╚════╝░╚═════╝░╚═╝░░░░░░╚═════╝░░╚════╝░╚═╝░░╚═╝

"""
print(cl("\t\t"+name, color='blue'))
print(cl("[*]𝐶𝑜𝐷𝑒𝑑 𝐵𝑦 𝑀𝑜𝑠𝑡𝑎𝑓𝑎 𝐸𝑙𝐺𝑢𝑒𝑟𝑑𝑎𝑤𝑖", color='red'))
print(" ")
first = 'P' #input(cl("JSFUCK List OR Payload >> (L/P) >> ", color='blue')).upper()

print(" ")


dicte = {
'false':      '![]',
'true':       '!![]',
'undefined':  '[][[]]',
'NaN':        '+{}',
'Infinity':   '+[+!+[]+[!+[]+[]][+[]][!+[]+!+[]+!+[]]+[+!+[]]+[+[]]+[+[]]+[+[]]][+[]]',
'Array':    '[]',
'Number':   '[+[]][0]',
'String':   '[[]+[]][0]',
'Boolean':  '[![]][0]',
'Function': '[]["fill"]',
'<':'([]+[])[([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][(![]+[])[+[]]+(![]+[])[!+[]+!+[]]+(![]+[])[+!+[]]+(!![]+[])[+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()[+[]]',
'>':'([]+[])[([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][(![]+[])[+[]]+(![]+[])[!+[]+!+[]]+(![]+[])[+!+[]]+(!![]+[])[+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()[!+[]+!+[]]',
'RegExp':   'Function`$$${"return/"+false+"/"}$$```',
'a':   '(![]+[])[+!+[]]',
'b':   '[[][+[]]+{}][0][11]',
'c':   '([][(![]+[])[+[]]+(![]+[])[!+[]+!+[]]+(![]+[])[+!+[]]+(!![]+[])[+[]]]+[])[!+[]+!+[]+!+[]]',
'd':   '([][[]]+[])[!+[]+!+[]]',
'e':   '(!![]+[])[!+[]+!+[]+!+[]]',
'f':   '(![]+[])[+[]]',
'g':   '[false+[0]+String][0][20]',
'h':   'Function`$${"return"+`[`+1+0+1+`][0]`+".toString("+2+1+")"}$```[1]',
'i':   '([![]]+[][[]])[+!+[]+[+[]]]',
'j':   '[[]+{}][0][10]',
'k':   'Function`$${"return"+`[`+2+0+`][0]`+".toString("+2+1+")"}$```',
'l':   '(![]+[])[!+[]+!+[]]',
'm':   '[Number+0][0][11]',
'n':   '([][[]]+[])[+!+[]]',
'o':   '[[]+{}][0][1]',
'p':   'Function`$${"return"+`[`+2+1+1+`][0]`+".toString("+3+1+")"}$```[1]',
'q':   'Function`$${"return"+`[`+2+1+2+`][0]`+".toString("+3+1+")"}$```[1]',
'r':   '(!![]+[])[+!+[]]',
's':   '(![]+[])[!+[]+!+[]+!+[]]',
't':   '(!![]+[])[+[]]',
'u':   '([][[]]+[])[+[]]',
'v':   'Function`$${"return"+`[`+3+1+`][0]`+".toString("+3+2+")"}$```',
'w':   'Function`$${"return"+`[`+3+2+`][0]`+".toString("+3+3+")"}$```',
'x':   'Function`$${"return"+`[`+1+0+1+`][0]`+".toString("+3+4+")"}$```[1]',
'y':   '(+[![]]+[+(+!+[]+(!+[]+[])[!+[]+!+[]+!+[]]+[+!+[]]+[+[]]+[+[]]+[+[]])])[+!+[]+[+[]]]',
'z':   'Function`$${"return"+`[`+3+5+`][0]`+".toString("+3+6+")"}$```',
' ':   '[!![]+{}][0][11]',
'!':   '`!`',
'"':   'Function`$${"return"+`[[]+[]][+[]]`+".fontcolor()"}$```[12]',
'(':   '([][(![]+[])[+[]]+(![]+[])[!+[]+!+[]]+(![]+[])[+!+[]]+(!![]+[])[+[]]]+[])[+!+[]+[!+[]+!+[]+!+[]]]',
')':   '([+[]]+![]+[][(![]+[])[+[]]+(![]+[])[!+[]+!+[]]+(![]+[])[+!+[]]+(!![]+[])[+[]]])[!+[]+!+[]+[+[]]]',
}

def payload():
    try:
        xss = input(cl("Enter Your Payload >> ", color='blue')).lower()
        print(" ")
        while xss != 'exit':
            for i in range(len(xss)):
                x = dicte[xss[i]] + "+"
                js = str(x).split("\n")
                fin = str(js[0])
                fincl = cl(fin, color='red')
                print(fincl, end="")
            print("\n")
            xss = input(cl("Enter Your Payload >> ", color='blue')).lower()
            print(" ")
    except Exception as e:
        print(e)
   

def lista():
    li = input("Enter List PATH >> ")
    loads = open(li, 'r').readlines()
    for xss in loads:
        for i in range(len(xss)):
            x = dicte[xss[i]] + "+"
            js = str(x).split("\n")
            fin = str(js[0])
            print(fin, end="")
        print("\n")
        
if first == 'P':
    payload()

elif first == 'L':
    print(cl("SOON!!", color='yellow'))
